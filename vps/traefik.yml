version: '3.3'

services:
  dockerproxy:
    image: tecnativa/docker-socket-proxy:latest
    restart: unless-stopped
    environment:
      - CONTAINERS=1
    networks:
      - socket_docker
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  traefik:
    image: traefik:v2.10.1
    container_name: traefik
    restart: unless-stopped
    depends_on:
      - dockerproxy
    volumes:
      - ${HOST_PATH}/acme.json:/acme.json
      - ${HOST_PATH}/data:/data
    networks:
      - global_net
      - socket_docker
    sysctls:
      net.ipv4.ip_unprivileged_port_start: 0
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.entrypoints=https'
      - 'traefik.http.routers.api.service=api@internal'
      - 'traefik.http.routers.api.middlewares=authentik@docker'

      - 'com.centurylinklabs.watchtower.monitor-only=true'
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_API_KEY=${CF_API_KEY}
    #extra_hosts:
    #  - host.docker.internal:127.0.0.1 # For net=host containers (public ip, put in env)
    ports:
      - 80:80
      - 443:443
    command:
      - '--api'

      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--providers.docker.network=global_net'
      - '--providers.docker.endpoint=tcp://dockerproxy:2375'
      - '--providers.docker.defaultRule=Host(`{{ index .Labels "com.docker.compose.service"}}.${APP_DOMAIN}`)'

        # Accept connections on :80 but redirect to :443
      - '--entrypoints.http=true'
      - '--entrypoints.http.address=:80'
      - '--entrypoints.http.http.redirections.entrypoint.to=https'
      - '--entrypoints.http.http.redirections.entrypoint.scheme=https'

        # Accept connections on :443
      - '--entrypoints.https=true'
      - '--entrypoints.https.address=:443'
      - '--entrypoints.https.http.tls=true'
      - '--entrypoints.https.http.tls.certResolver=letsencrypt'
      - '--entrypoints.https.http.tls.domains[0].main=${APP_DOMAIN}'
      - '--entrypoints.https.http.tls.domains[0].sans=*.${APP_DOMAIN}'
      - '--entrypoints.https.http.tls.domains[1].main=code.${APP_DOMAIN}'
      - '--entrypoints.https.http.tls.domains[1].sans=*.code.${APP_DOMAIN}'
      #- '--entrypoints.https.http.middlewares=error-pages@docker'

      - '--certificatesResolvers.letsencrypt.acme.storage=acme.json'
      - '--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare'
      # Staging
      #- '--certificatesResolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory'
      - '--certificatesResolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory'

      - '--log=true'
      - '--log.level=${TRAEFIK_LOG_LEVEL:-INFO}'
      #- '--log.filepath=/var/log/traefik.log'

      - '--accesslog.filepath=/data/access.log'
      #- '--metrics.prometheus=true'

  nginxError:
    container_name: nginxError
    image: nginx:latest
    restart: unless-stopped
    volumes:
      - ./error-pages/html:/usr/share/nginx/error-pages
      - ./error-pages/nginx-error-pages.conf:/etc/nginx/conf.d/default.conf
    networks:
      - global_net
    #ports:
    #  - 80:80
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.error-router.entrypoints=https'
      - 'traefik.http.services.error-pages-service.loadbalancer.server.port=80'

      - 'traefik.http.routers.error-router.rule=HostRegexp(`{host:.+}`)'
      - 'traefik.http.routers.error-router.priority=1'
      - 'traefik.http.routers.error-router.middlewares=error-pages@docker'

      - 'traefik.http.middlewares.error-pages.errors.status=400-599'
      - 'traefik.http.middlewares.error-pages.errors.service=error-pages-service'
      - 'traefik.http.middlewares.error-pages.errors.query=/{status}.html'

networks:
  global_net:
    external: true
  socket_docker: